import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {

//  Регулярні вирази нам допомагають знайти всередині будь-яких стрічкових значень відповідність якимось патернам.
//  Для прикладу, чи правильний номер телефону. Для прикладу у нас є три номера, які виглядають ось так.

        String number = "+380671231212";
        String number1 = "+38(067)1231212";
        String number2 = "+38(067)1231212-nocopy";

//  Як бачимо, перші 2 більш-менш нормально виглядають, а третій незрозумілий. Відповідно, якщо ми не зможемо написати
//  за допомогою if else конструкції всі можливі варіанти, які можуть бути присутні (комбінацій цифер, знаків, символів).
//  Для цього і існують регулярні вирази.

//  Для того щоб створити регулярний вираз, нам потрібно викликати клас Pattern і його метод compile(). Всередину
//  ми передаємо регулярний вираз, який виглядає ось так:

//  1) У нас буде діапазон, у якого буде зберігатися +. Він може бути а може і ні (знак питання). Тобто номер може
//  виглядати ось так: 38(067)1231212.
//  2) Дальше у нас буде діапазон цифер від 0 до 9. Наприклад, якщо нам потрібно конкретні числа, (1,9,5) ми б писали: [195].
//  3) В цьому діапазоні може буде присутнім таких цифер від 1 до трьох {1,3}. Тобто, три нуля,три дев'ятки чи 1 2 3 і т.д.
//  4) [(]? - у нас може бути присутня, а може і бути відсутня, кругла дужка.
//  5) Після того, якщо вона є, у нас може бути діапазон чисел від 0 до 9 в розмірі 3.
//  6) [)]? - може бути і може не бути кругла дуджка.
//  7) Після цього у нас буде діапазон від 0 до 9 в кількості від 7 до 9 цифер

        Pattern pattern = Pattern.compile("[+]?[0-9]{1,3}[(]?[0-9]{3}[)]?[0-9]{7,9}");
        Matcher matcher = pattern.matcher(number);
        Matcher matcher2 = pattern.matcher(number1);
        Matcher matcher3 = pattern.matcher(number2);

//  Це вертає нам об'єкт типу compile, але ми назвали його pattern.
//  Викликаємо метод matcher() і вставляємо стрічку, яку хочемо перевірити.
//  Це верне нам об'єкт типу matcher. Потім ми викликаємо метод matches(), який верне boolean тип в залежності,
//  чи відповідає вона правилам нащого патерну

        boolean result = matcher.matches();
        boolean result2 = matcher2.matches();
        boolean result3 = matcher3.matches();

        System.out.println(result);
        System.out.println(result2);
        System.out.println(result3);

//  Крім числових діапазонів, ми можемо визначати діапазони букв. Для прикладу, [a-zA-Z] - це повний діапазон
//  від a до z маленьких і великих букв.
//  Таких паттернів можна написати безліч кількість варіантів.

        Pattern pattern2 = Pattern.compile("[+]?[a-zA-Z]{1,3}[(]?[0-9]{3}[)]?[0-9]{7,9}");

    }
}
